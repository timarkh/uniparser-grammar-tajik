DELIMITERS = "<SENT_BOUNDARY>";
LIST BOS = (>>>);
SET BOSPunct = (punct) | BOS;
LIST Aux = ("хостан" V) ("будан" V) ("истодан" V) ("шудан" V);
SET NotAux = (*) - Aux;

SECTION    # Verbs
# Literary future: want.SBJV + V.PST.3SG
ADD (fut) (V pst 3 sg) - (cnject) - (cnject2) IF (-1 ("хостан" V sbjv));

# Pluperfect: V.PART.PST + be.PST
ADD (pluprf) (V part.pst) IF (1 ("будан" V pst) - (cnject) - (cnject2))
                             (NOT -1 (V part.pst));
ADD (pluprf) (V part.pst) - Aux IF (1 ("будан" V pst) - (cnject) - (cnject2))
                                   (-1 (V part.pst));

# Present progressive: V.PART.PST + stand.PRF
ADD (prs.prog prog) (V part.pst) IF (1 ("истодан" V prf))
                               (NOT -1 (V part.pst));
ADD (prs.prog prog) (V part.pst) - Aux IF (1 ("истодан" V prf))
                                     (-1 (V part.pst));

# Past progressive: V.PART.PST + stand.PART.PST + be.PST
ADD (pst.prog prog) (V part.pst) IF (1 ("истодан" V part.pst))
                                     (2 ("будан" V pst) - (cnject) - (cnject2) - (hab))
                                     (NOT -1 (V part.pst));
ADD (pst.prog prog) (V part.pst) - Aux IF (1 ("истодан" V part.pst))
                                           (2 ("будан" V pst) - (cnject) - (cnject2) - (hab))
                                           (-1 (V part.pst));

# Evidential pluperfect: V.PART.PST + be.PRF
ADD (pluprf.evid) (V part.pst) IF (1 ("будан" V prf))
                                  (NOT -1 (V part.pst));
ADD (pluprf.evid) (V part.pst) - Aux IF (1 ("будан" V prf))
                                        (-1 (V part.pst));

# Evidential progressive: V.PART.PST + stand.PART.PST + be.PRF
ADD (evid.prog prog) (V part.pst) IF (1 ("истодан" V part.pst))
                                (2 ("будан" V prf))
                                (NOT -1 (V part.pst));
ADD (evid.prog prog) (V part.pst) - Aux IF (1 ("истодан" V part.pst))
                                      (2 ("будан" V prf))
                                      (-1 (V part.pst));

# Subjunctive past: V.PART.PST + be.SBJV
ADD (sbjv.pst) (V part.pst) IF (1 ("будан" V sbjv))
                               (NOT -1 (V part.pst));
ADD (sbjv.pst) (V part.pst) - Aux IF (1 ("будан" V sbjv))
                                     (-1 (V part.pst));

# Durative subjunctive: V.HAB.PART.PST + be.SBJV
ADD (sbjv.hab) (V hab.part.pst) IF (1 ("будан" V sbjv))
                                   (NOT -1 (V part.pst));
ADD (sbjv.hab) (V hab.part.pst) - Aux IF (1 ("будан" V sbjv))
                                         (-1 (V part.pst));

# Progressive subjunctive: V.PART.PST + stand.PART.PST + be.SBJV
ADD (sbjv.prog prog) (V part.pst) IF (1 ("истодан" V part.pst))
                                (2 ("будан" V sbjv))
                                (NOT -1 (V part.pst));
ADD (sbjv.prog prog) (V part.pst) - Aux IF (1 ("истодан" V part.pst))
                                      (2 ("будан" V sbjv))
                                      (-1 (V part.pst));

# Conjectual present progressive 1: V.PART.PST + stand.CNJECT.PST
ADD (cnject.prs.prog prog) (V part.pst) IF (1 ("истодан" V cnject pst))
                                      (NOT -1 (V part.pst));
ADD (cnject.prs.prog prog) (V part.pst) - Aux IF (1 ("истодан" V cnject pst))
                                            (-1 (V part.pst));

# Conjectual present progressive 2: V.PART.PST + stand.CNJECT2.PST
ADD (cnject2.prs.prog prog) (V part.pst) IF (1 ("истодан" V cnject2 pst))
                                       (NOT -1 (V part.pst));
ADD (cnject2.prs.prog prog) (V part.pst) - Aux IF (1 ("истодан" V cnject2 pst))
                                             (-1 (V part.pst));


# Passives
# Past passive: V.PART.PST + become.PST
ADD (pst.pass pass) (V part.pst) IF (1 ("шудан" V pst) - (cnject) - (cnject2) - (hab))
                               (NOT -1 (V part.pst));
ADD (pst.pass pass) (V part.pst) - Aux IF (1 ("шудан" V pst) - (cnject) - (cnject2) - (hab))
                                     (-1 (V part.pst));

# Present passive: V.PART.PST + become.PRS
ADD (prs.pass pass) (V part.pst) IF (1 ("шудан" V prs) - (cnject) - (cnject2))
                               (NOT -1 (V part.pst));
ADD (prs.pass pass) (V part.pst) - Aux IF (1 ("шудан" V prs) - (cnject) - (cnject2))
                                     (-1 (V part.pst));

# Imperfect passive: V.PART.PST + become.PST.HAB
ADD (impf.pass pass) (V part.pst) IF (1 ("шудан" V hab pst))
                                (NOT -1 (V part.pst));
ADD (impf.pass pass) (V part.pst) - Aux IF (1 ("шудан" V hab pst))
                                      (-1 (V part.pst));

# Perfect passive: V.PART.PST + become.PRF
ADD (prf.pass pass) (V part.pst) IF (1 ("шудан" V prf) - (hab))
                               (NOT -1 (V part.pst));
ADD (prf.pass pass) (V part.pst) - Aux IF (1 ("шудан" V prf) - (hab))
                                     (-1 (V part.pst));

# Evidential durative passive: V.PART.PST + become.PRF.HAB
ADD (hab.prf.pass pass) (V part.pst) IF (1 ("шудан" V prf hab))
                                    (NOT -1 (V part.pst));
ADD (hab.prf.pass pass) (V part.pst) - Aux IF (1 ("шудан" V prf hab))
                                          (-1 (V part.pst));

# Subjunctive passive: V.PART.PST + become.SBJV
ADD (sbjv.pass pass) (V part.pst) IF (1 ("шудан" V sbjv))
                                (NOT -1 (V part.pst));
ADD (sbjv.pass pass) (V part.pst) - Aux IF (1 ("шудан" V sbjv))
                                      (-1 (V part.pst));

# Conjectual past passive: V.PART.PST + become.CNJECT.PST
ADD (cnject.pst.pass pass) (V part.pst) IF (1 ("шудан" V cnject pst))
                                      (NOT -1 (V part.pst));
ADD (cnject.pst.pass pass) (V part.pst) - Aux IF (1 ("шудан" V cnject pst))
                                            (-1 (V part.pst));

ADD (cnject2.pst.pass pass) (V part.pst) IF (1 ("шудан" V cnject2 pst))
                                       (NOT -1 (V part.pst));
ADD (cnject2.pst.pass pass) (V part.pst) - Aux IF (1 ("шудан" V cnject2 pst))
                                             (-1 (V part.pst));


# Conjectual present passive: V.PART.PST + become.CNJECT.PRS
ADD (cnject.prs.pass pass) (V part.pst) IF (1 ("шудан" V cnject prs))
                                      (NOT -1 (V part.pst));
ADD (cnject.prs.pass pass) (V part.pst) - Aux IF (1 ("шудан" V cnject prs))
                                            (-1 (V part.pst));

ADD (cnject2.prs.pass pass) (V part.pst) IF (1 ("шудан" V cnject2 prs))
                                       (NOT -1 (V part.pst));
ADD (cnject2.prs.pass pass) (V part.pst) - Aux IF (1 ("шудан" V cnject2 prs))
                                             (-1 (V part.pst));

# Analytic passives
# Literary future passive: V.PART.PST + want.SBJV + become.PST
ADD (fut.pass pass) (V part.pst) IF (1 ("хостан" V sbjv))
                               (2 ("шудан" V pst 3 sg) - (cnject) - (cnject2) - (hab))
                               (NOT -1 (V part.pst));
ADD (fut.pass pass) (V part.pst) - Aux IF (1 ("хостан" V sbjv))
                                     (2 ("шудан" V pst 3 sg) - (cnject) - (cnject2) - (hab))
                                     (-1 (V part.pst));
                                     
# Subjunctive past passive: V.PART.PST + become.PART.PST + be.SBJV
ADD (sbjv.pst.pass pass) (V part.pst) IF (1 ("шудан" V part.pst))
                                     (2 ("будан" V sbjv))
                                     (NOT -1 (V part.pst));
ADD (sbjv.pst.pass pass) (V part.pst) - Aux IF (1 ("шудан" V part.pst))
                                          (2 ("будан" V sbjv))
                                          (-1 (V part.pst));

# Durative subjunctive passive: V.HAB.PART.PST + become.HAB.PART.PST + be.SBJV
ADD (sbjv.hab.pass pass) (V hab.part.pst) IF (1 ("шудан" V hab.part.pst))
                                        (2 ("будан" V sbjv))
                                        (NOT -1 (V hab.part.pst));
ADD (sbjv.hab.pass pass) (V hab.part.pst) - Aux IF (1 ("шудан" V hab.part.pst))
                                              (2 ("будан" V sbjv))
                                              (-1 (V hab.part.pst));

# Evidential pluperfect passive: V.PART.PST + become.PART.PST + be.PRF
ADD (pluprf.evid.pass pass) (V part.pst) IF (1 ("шудан" V part.pst))
                                       (2 ("будан" V prf))
                                       (NOT -1 (V part.pst));
ADD (pluprf.evid.pass pass) (V part.pst) - Aux IF (1 ("шудан" V part.pst))
                                             (2 ("будан" V prf))
                                             (-1 (V part.pst));

# Pluperfect passive: V.PART.PST + become.PART.PST + be.PST
ADD (pluprf.pass pass) (V part.pst) IF (1 ("шудан" V part.pst))
                                  (2 ("будан" V pst) - (cnject) - (cnject2))
                                  (NOT -1 (V part.pst));
ADD (pluprf.pass pass) (V part.pst) - Aux IF (1 ("шудан" V part.pst))
                                        (2 ("будан" V pst) - (cnject) - (cnject2))
                                        (-1 (V part.pst));

# Past progressive passive: V.PART.PST + become.PART.PST + stand.PART.PST + be.PST
ADD (pst.prog.pass prog pass) (V part.pst) IF (1 ("шудан" V part.pst))
                                     (2 ("истодан" V part.pst))
                                     (3 ("будан" V pst) - (cnject) - (cnject2) - (hab))
                                     (NOT -1 (V part.pst));
ADD (pst.prog.pass prog pass) (V part.pst) - Aux IF (1 ("шудан" V part.pst))
                                           (2 ("истодан" V part.pst))
                                           (3 ("будан" V pst) - (cnject) - (cnject2) - (hab))
                                           (-1 (V part.pst));

# Present progressive passive: V.PART.PST + become.PART.PST + stand.PRF
ADD (prs.prog.pass prog pass) (V part.pst) IF (1 ("шудан" V part.pst))
                                         (2 ("истодан" V prf))
                                         (NOT -1 (V part.pst));
ADD (prs.prog.pass prog pass) (V part.pst) - Aux IF (1 ("шудан" V part.pst))
                                               (2 ("истодан" V prf))
                                               (-1 (V part.pst));

# Non-finite passive
# Present progressive converb

# Non-finite passive
# Present progressive participle: V.PART.PST + stand.PART.MOD.PST
ADD (part.prs.prog) (V part.pst) IF (1 ("истодан" V part.mod.pst))
                                         (NOT -1 (V part.pst));
ADD (part.prs.prog) (V part.pst) - Aux IF (1 ("истодан" V part.mod.pst))
                                               (-1 (V part.pst));

# Past modal participle in passive: V.PART.PST + become.PART.MOD.PST
ADD (part.mod.pst.pass pass pass.part) (V part.pst) IF (1 ("шудан" V part.mod.pst))
                                              (NOT -1 (V part.pst));
ADD (part.mod.pst.pass pass pass.part) (V part.pst) - Aux IF (1 ("шудан" V part.mod.pst))
                                                    (-1 (V part.pst));

# Present modal participle in -агӣ in passive: V.PART.PST + become.PART.MOD.PRS
ADD (part.mod.prs.pass pass pass.part) (V part.pst) IF (1 ("шудан" V part.mod.prs))
                                        (NOT -1 (V part.pst));
ADD (part.mod.prs.pass pass pass.part) (V part.pst) - Aux IF (1 ("шудан" V part.mod.prs))
                                              (-1 (V part.pst));

# Present progressive converb: V.PART.PST + stand.PART.PST - be
ADD (conv.prs.prog conv) (V part.pst) IF (1 ("истодан" V part.pst))
                                        (NOT 2 ("будан" V))
                                        (NOT -1 (V part.pst));
ADD (conv.prs.prog conv) (V part.pst) - Aux IF (1 ("истодан" V part.pst))
                                              (NOT 2 ("будан" V))
                                              (-1 (V part.pst));
